
user  nginx;
##定义单进程。通常将其设成CPU的个数或者内核数
worker_processes  auto;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
##定义Nginx在哪里打日志

##Nginx写入主进程ID（PID）
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
    ##通过worker_connections和worker_processes计算maxclients。
    ##max_clients = worker_processes * worker_connections
}

http {
    include       /etc/nginx/mime.types;
    ##在/opt/nginx/conf/mime.types写的配置将在http模块中解析
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    ##如果是为了获取本地存储的静态化文件，sendfile可以加速服务端，但是如果是反向代理，那么该功能就失效了。
    #tcp_nopush     on;
    #在 nginx 中，tcp_nopush 配置和 tcp_nodelay "互斥"。它可以配置一次发送数据的包大小。也就是说，它不是按时间累计  0.2 秒后发送包，而是当包累计到一定大小后就发送。在 nginx 中，tcp_nopush 必须和sendfile 搭配使用。
    
    keepalive_timeout  65;
    include /etc/nginx/conf.d/*.conf;
    #设置保持客户端连接时间
    #gzip  on;
    #告诉服务端用gzip压缩
    server {
      #如果你想对虚拟主机进行配置，可以在单独的文件中配置server模块，然后include进来
      # listen       80;
      #告诉Nginx TCP端口，监听HTTP连接。listen 80; 和 listen *:80;是一样的
      #error_page  404              /404.html;

        # listen       8081;
      # server_name  xxx.abc.com;
      location ~* .(html)$ {
        access_log off;
        add_header  Cache-Control  max-age=no-cache;
      }

      location ~* .(css|js|png|jpg|jpeg|gif|gz|svg|mp4|ogg|ogv|webm|htc|xml|woff)$ {
        # 同上，通配所有以.css/.js/...结尾的请求
        access_log off;
        add_header    Cache-Control  max-age=360000;
      }




    }
}
